# An example scene to show the usage of the scenefile language

# With 'float' we can declare variables that we can use anywhere (a float is expected).
float red(0.5)
float green(0.5)
float blue(0.5)
float angle(0)

# With 'materials' we can declare (guess what) materials. Each of them includes a BRDF and a pigment.
material sky_material(
	diffuse(uniform(<0.8, 0.1, 1.>)),	# A diffuse BRDF will reflect rays in random directions.
	uniform(<0.8, 0.8, 1>)			# The sky is a light source, so we assign a non-black pigment to it.
)

material ground_material(
	diffuse(checkered(<0.3, 0.5, 0.1>,	# The ground is checkered: two colors are alternated.
		<0.1, 0.2, 0.5>, 4)),		# As you have surely noticed, colors are defined using the <red, green, blue> syntax.
	uniform(<0, 0, 0>)			# No light from the ground...
)

material box_material(
	dielectric(uniform(<red, green, blue>), 0.1, 1.5),	# The box has a dielectric material, with roughness 0.1 and refracion index 1.5. Like an ice cube.
	uniform(<0, 0, 0>)
)

material sphere_material(
	diffuse(image("../textures/marble_20.pfm", <0.8, 0.3, 0.4>)),	# The sphere uses a texture as the pigment for its BRDF. You can use any pfm you like, and also give it a custom color.
	uniform(<0, 0, 0>)
)

# Now that we have all our materials, we can define the actual shapes that are in the scene.

# First of all we define a CSG union of a box and a sphere.
union(
	# Each shape has a material as its first argument, and a transformation as its last argument.
	# Depending on the shape, there can be middle parameters: for example, the box takes the minimum and maximum vertices.
	box(box_material, [-0.5, -0.5, -1], [0.5, 0.5, 0], translation([0, -1, 0]) * rotation_z(45)),

	# sphere defines the unit sphere, to which some transformations are applied.
	# You can combine transformations with *. They are applied from right to left.
	sphere(sphere_material, translation([0, -1, 0.2]) * scaling([0.5, 0.5, 0.5])),

	# If we want, we can also transform the whole union. In this case, we leave it unchanged.
	identity
)

# Let's now define the ground with a plane.
# The language is flexible enough to permit spaces before "("
plane (ground_material, translation([0, 0, -1]))

# Finally, the sky is a big sphere of radius 7.5.
sphere(sky_material, scaling([7.5, 7.5, 7.5]))

# Without a camera there is nothing to see!
# You can set the type of camera, the tranformation to apply and the distance from the screen.
# The aspect ratio is calculated from the width and height, and can be overwritten with a parameter to pass to the render action.
camera(perspective, translation([-1, 0, 0]) * rotation_z(angle), 1.0)
